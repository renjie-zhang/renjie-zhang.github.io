<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Web on Renjie Blog</title>
    <link>https://renjie-zhang.github.io/tags/web/</link>
    <description>Recent content in Web on Renjie Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 14 Mar 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://renjie-zhang.github.io/tags/web/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Gin</title>
      <link>https://renjie-zhang.github.io/post/2020-3-14-gin-first/</link>
      <pubDate>Sat, 14 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://renjie-zhang.github.io/post/2020-3-14-gin-first/</guid>
      <description>Gin初体验 后端开发难免会接触到web,在Java的框架中spring一家独大，无论是web还是其他服务spring都是不二的选择；而golang的web方面选择特别的多，想gin,beego等，现在还处于不断造轮子的阶段，都在为开源做贡献，目前进行了一个Gin的初体验，总体上是让人很满意的，不管是gin还是beego都是以modules的这种形式，只允许加入自己需要的东西，减少负荷，以便加载到内存中的modules都是自己需要的。
特性都可以在gin的文档中寻找到，如果追求性能与高效，这是一个吸引人的亮点，在目前的开发中，都是最求极致的性能与高效。本来go已经在http中为我们做足了工作，建立起一个http请求及其简单。
package main import ( &amp;quot;fmt&amp;quot; &amp;quot;net/http&amp;quot; &amp;quot;time&amp;quot; ) func greet(w http.ResponseWriter, r *http.Request) { fmt.Fprintf(w, &amp;quot;Hello World! %s&amp;quot;, time.Now()) } func header(w http.ResponseWriter, req *http.Request) { for name, headers := range req.Header { for _, h := range headers { fmt.Fprintf(w, &amp;quot;%v: %v\n&amp;quot;, name, h) } } } func main() { http.HandleFunc(&amp;quot;/&amp;quot;, greet) http.HandleFunc(&amp;quot;/headers&amp;quot;, header) http.ListenAndServe(&amp;quot;:8080&amp;quot;, nil) }  这样便建立起了一个http server,监听在8080端口。而gin建立起一个请求更为简单，一下为入门例子。
package main import &amp;quot;github.com/gin-gonic/gin&amp;quot; func main() { r := gin.</description>
    </item>
    
  </channel>
</rss>