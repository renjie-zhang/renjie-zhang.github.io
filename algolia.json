[
    {
        "layout": "post",
        "uri": "post/2019-08-22-Queue",
        "content": "java  public class ArrayQueue               private int maxSize         private int front         private int rear       private int   arr           param arrMaxSize            public ArrayQueue int arrMaxSize   this maxSize   arrMaxSize  this arr   new int maxSize      1  front       this front    1     1  rear        this rear    1                    return    public boolean isFull    return rear    maxSize 1                  return    public boolean isEmpty    return front    rear                  param n       public void addToQueue int n   if isFull     System out println                 return    rear    arr rear    n                  return    public int getData    if isEmpty     throw new RuntimeException                   front    return arr front                     public void Show     isEmpty     System out println          return    for int i 0 i",
        "objectID": "post/2019-08-22-Queue",
        "title": "Queue",
        "subtitle": "数组实现",
        "description": "A Queue is a linear structure which follows a particular order in which the operations are performed. The order is First In First Out (FIFO).",
        "date": "2019-08-20T00:00:00.000Z",
        "author": "     \"renjie.zhang\"",
        "image": "https://raw.githubusercontent.com/renjie-zhang/renjie-zhang.github.io/master/img/Queue-title.jpg",
        "tags": [
            "Data Structure",
            "Algorithm"
        ],
        "categories": [
            "Blog"
        ]
    },
    {
        "title": "Queue",
        "uri": "post/2019-08-27-Queue-II",
        "content": "java       author  renjie zhang  date 2019 8 25 16 23  Description              public class LinkedListQueue   private Node head  new Node 0   public Node getHead     return head                param node    public void EnQueue Node node   Node temp   head   true    temp next    null   break    temp   temp next    temp next   node                param head  return    public Node DeQueue Node head   if head next    null   return null    Node current   head next  head next   current next  return current              param head    public void show Node head   if head next    null   System out println            Node temp   head next   true   if temp    null   break    System out println temp toString     temp   temp next                    param head  return    public boolean isEmpty Node head   if head next    null   return true    return false                 Golang  package LinkedQueue type Node struct   data int next  Node   type Queue struct   rear  Node          func  this  Queue  EnQueue i int    data     Node data  i  this rear    nil   data next   this rear   this rear   data          func  this  Queue  DeQueue    int  bool    this rear    nil   return 0  false   this rear next    nil      this rear data this rear   nil return i  true   current    this rear   current next next    nil      current next data current next   nil return i  true   current   current next     func  this  Queue  Peek    int  bool    this rear    nil   return 0  false   return this rear data  true   func  this  Queue  Get     int   var items   int current    this rear current    nil   items   append items  current data  current   current next   return items   func  this  Queue  IsEmpty   bool   return this rear    nil   func this  Queue  Empty    this rear   nil",
        "objectID": "post/2019-08-27-Queue-II",
        "subtitle": "链表实现",
        "description": "Implement an infinite wait queue with a linked list",
        "date": "2019-08-27T00:00:00.000Z",
        "author": "     \"renjie.zhang\"",
        "image": "https://raw.githubusercontent.com/renjie-zhang/renjie-zhang.github.io/master/img/Queue-title.jpg",
        "tags": [
            "Data Structure",
            "Algorithm"
        ],
        "categories": [
            "Blog"
        ]
    },
    {
        "title": "collect",
        "uri": "post/2019-08-30-collect",
        "content": "https   www geeksforgeeks org       https   java design patterns com patterns       https   xlinux nist gov dads          https   java2blog com data structure and algorithm interview questions in java  Linux       https   distrotest net         https   www discoverdev io  Hacker news  https   news ycombinator com             https   naotu baidu com       https   www processon com",
        "objectID": "post/2019-08-30-collect",
        "subtitle": "",
        "description": "Recommend",
        "date": "2025-08-31T00:00:00.000Z",
        "author": "     \"renjie.zhang\"",
        "image": "https://raw.githubusercontent.com/renjie-zhang/renjie-zhang.github.io/master/img/landscape.jpg",
        "tags": [
            "Collect"
        ],
        "categories": [
            "Collect"
        ]
    },
    {
        "title": "约瑟夫环(Josephus) ",
        "uri": "post/2019-08-31-Josephus",
        "content": "Josephus                    39      Josephus            39                              41           1            3                                    Josephus                       k 2                    k         k 1       k                                                            Josephus                      16   31                 17                               15    15                                           30                                             15                                                                                                     O N M         O N                                 static void getPosition int index int total     first create circle linked head Node head   new Node 1   Node prev   head  for int   2 i",
        "objectID": "post/2019-08-31-Josephus",
        "subtitle": "",
        "description": "https://zh.wikipedia.org/wiki/%E7%BA%A6%E7%91%9F%E5%A4%AB%E6%96%AF%E9%97%AE%E9%A2%98",
        "date": "2019-09-03T00:00:00.000Z",
        "author": "     \"renjie.zhang\"",
        "image": "https://raw.githubusercontent.com/renjie-zhang/renjie-zhang.github.io/master/img/music.jpg",
        "tags": [
            "Data Structure",
            "Algorithm"
        ],
        "categories": [
            "Blog"
        ]
    }
]