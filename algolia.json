[{"author":null,"categories":null,"content":null,"date":1599955200,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":0,"html":null,"keywords":null,"kind":"taxonomy","lang":"en","lastmod":1599955200,"objectID":"","permalink":"https://renjie-zhang.github.io/categories/blog/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/categories/blog/","section":"categories","summary":"","tags":null,"title":"Blog","type":"categories","url":"/categories/blog/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1599955200,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":0,"html":null,"keywords":null,"kind":"taxonomyTerm","lang":"en","lastmod":1599955200,"objectID":"","permalink":"https://renjie-zhang.github.io/categories/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/categories/","section":"categories","summary":"","tags":null,"title":"Categories","type":"categories","url":"/categories/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1599955200,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":0,"html":null,"keywords":null,"kind":"taxonomy","lang":"en","lastmod":1599955200,"objectID":"","permalink":"https://renjie-zhang.github.io/tags/coding/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/tags/coding/","section":"tags","summary":"","tags":null,"title":"Coding","type":"tags","url":"/tags/coding/","weight":0,"wordcount":0},{"author":null,"categories":["Blog"],"content":"不自觉的会犯的错误","date":1599955200,"description":"不自觉的会犯的错误","dir":"post\\","excerpt_html":"不自觉的会犯的错误","excerpt_text":"不自觉的会犯的错误","expirydate":-62135596800,"fuzzywordcount":100,"html":"不自觉的会犯的错误","keywords":null,"kind":"page","lang":"en","lastmod":1599955200,"objectID":"4040bbfc9c6579822accc5a0b0869b14","permalink":"https://renjie-zhang.github.io/post/2020-09-13-coding-issue/","publishdate":"2020-09-13T00:00:00Z","readingtime":1,"relpermalink":"/post/2020-09-13-coding-issue/","section":"post","summary":"封装的错误 工作中很多语言都是面向对象的语言，面向对象的三大特征，有时候也是四大特性，我们常说的封装、继承、多态，四大特性就需要加上抽象。我们对对象进行封装是为了更好隐藏或者数据访问保护，但是并不是所有的属性都是可以进行get与set的。这便是我们常犯的一个错误，使用Lombok的注解@Getter与@Setter直接将所有的属性暴露了，此时封装便形同虚无，完全没有达到目的。 下面用极客时间王争设计模式之美课程的一个列子来说明：\npublic class Wallet { private String id; private long createTime; private BigDecimal balance; private long balanceLastModifiedTime; public String getId() { return id; } public long getCreateTime() { return createTime; } public BigDecimal getBalance() { return balance; } public long getBalanceLastModifiedTime() { return balanceLastModifiedTime; } public void increaseBalance(BigDecimal increasedAmount){ if(increasedAmount.compareTo(BigDecimal.ZERO) \u0026lt; 0){ throw new Exception(\u0026quot;...\u0026quot;); } this.balance.add(increasedAmount); this.balanceLastModifiedTime = System.currentTimeMillis(); } }  这是一个虚拟钱包的大概一个实现，在我们平常的开发中，并不是很重视get与set方法，直接使用注解@Getter与@Setter，也让在修改属性返回类型，修改属性名称时很方便；但是这并不是我们的目的。对于部分属性我们是不需要对外暴露set方法，只允许get。 对于balance并没有set方法，而是封装在$increaseBalance()中，因为在修改时，需要对参数进行校验，满足条件的参数才会进行修改，这便是我们的目的，使用封装来对数据进行保护。\n未完。。。","tags":["Coding","Design-Partten"],"title":"Coding Common Problem","type":"post","url":"/post/2020-09-13-coding-issue/","weight":0,"wordcount":67},{"author":null,"categories":null,"content":null,"date":1599955200,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":0,"html":null,"keywords":null,"kind":"taxonomy","lang":"en","lastmod":1599955200,"objectID":"","permalink":"https://renjie-zhang.github.io/tags/design-partten/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/tags/design-partten/","section":"tags","summary":"","tags":null,"title":"Design-Partten","type":"tags","url":"/tags/design-partten/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1599955200,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":0,"html":null,"keywords":null,"kind":"section","lang":"en","lastmod":1599955200,"objectID":"","permalink":"https://renjie-zhang.github.io/post/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/post/","section":"post","summary":"","tags":null,"title":"Posts","type":"post","url":"/post/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1599955200,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":0,"html":null,"keywords":null,"kind":"home","lang":"en","lastmod":1599955200,"objectID":"","permalink":"https://renjie-zhang.github.io/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/","section":"","summary":"","tags":null,"title":"Renjie Blog","type":"page","url":"/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1599955200,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":0,"html":null,"keywords":null,"kind":"taxonomyTerm","lang":"en","lastmod":1599955200,"objectID":"","permalink":"https://renjie-zhang.github.io/tags/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/tags/","section":"tags","summary":"","tags":null,"title":"Tags","type":"tags","url":"/tags/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1567468800,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":0,"html":null,"keywords":null,"kind":"taxonomy","lang":"en","lastmod":1567468800,"objectID":"","permalink":"https://renjie-zhang.github.io/tags/algorithm/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/tags/algorithm/","section":"tags","summary":"","tags":null,"title":"Algorithm","type":"tags","url":"/tags/algorithm/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1567468800,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":0,"html":null,"keywords":null,"kind":"taxonomy","lang":"en","lastmod":1567468800,"objectID":"","permalink":"https://renjie-zhang.github.io/tags/data-structure/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/tags/data-structure/","section":"tags","summary":"","tags":null,"title":"Data Structure","type":"tags","url":"/tags/data-structure/","weight":0,"wordcount":0},{"author":null,"categories":["Blog"],"content":"https://zh.wikipedia.org/wiki/%E7%BA%A6%E7%91%9F%E5%A4%AB%E6%96%AF%E9%97%AE%E9%A2%98","date":1567468800,"description":"https://zh.wikipedia.org/wiki/%E7%BA%A6%E7%91%9F%E5%A4%AB%E6%96%AF%E9%97%AE%E9%A2%98","dir":"post\\","excerpt_html":"https://zh.wikipedia.org/wiki/%E7%BA%A6%E7%91%9F%E5%A4%AB%E6%96%AF%E9%97%AE%E9%A2%98","excerpt_text":"https://zh.wikipedia.org/wiki/%E7%BA%A6%E7%91%9F%E5%A4%AB%E6%96%AF%E9%97%AE%E9%A2%98","expirydate":-62135596800,"fuzzywordcount":200,"html":"https://zh.wikipedia.org/wiki/%E7%BA%A6%E7%91%9F%E5%A4%AB%E6%96%AF%E9%97%AE%E9%A2%98","keywords":null,"kind":"page","lang":"en","lastmod":1567468800,"objectID":"d9d86c6fda2952f24c44c53678295cdf","permalink":"https://renjie-zhang.github.io/post/2019-08-31-josephus/","publishdate":"2019-09-03T00:00:00Z","readingtime":1,"relpermalink":"/post/2019-08-31-josephus/","section":"post","summary":"约瑟夫问题 据说著名犹太历史学家 Josephus有过以下的故事：在罗马人占领乔塔帕特后，39 个犹太人与Josephus及他的朋友躲到一个洞中，39个犹太人决定宁愿死也不要被敌人抓到，于是决定了一个自杀方式：41个人排成一个圆圈，由第1个人开始报数，每报数到第3人该人就必须自杀，然后再由下一个重新报数，直到所有人都自杀身亡为止。然而Josephus 和他的朋友并不想遵从。首先从一个人开始，越过k-2个人（因为第一个人已经被越过），并杀掉第k个人。接着，再越过k-1个人，并杀掉第k个人。这个过程沿着圆圈一直进行，直到最终只剩下一个人留下，这个人就可以继续活着。问题是一开始要站在什么地方才能避免自杀？Josephus要他的朋友先假装遵从，他将朋友与自己安排在第16个与第31个位置，于是逃过了这场死亡游戏。\n问题即，给定人数、起点、方向和要跳过的数字，选择初始圆圈中的位置以避免被处决。\n基本选择的解法是使用单项的循环链表模拟整个过程，时间复杂度为O(N*M),而空间复杂度为O(N)。或者使用数学公式递归的方式求出存活下来的编号。\n循环链表解决 static void getPosition(int index,int total){ //first create a circle linked head Node head = new Node(1); Node prev = head; for(int i = 2;i\u0026lt;=total;i++){ prev.next = new Node(i); //move next prev = prev.next; } //create a cirecle linkedlist prev.next = head; // create two temp node Node ptr1 = head; Node ptr2 = head; while(ptr1.next != ptr1){ //find index-th node int count = 1; while (count !","tags":["Data Structure","Algorithm"],"title":"约瑟夫环(Josephus) ","type":"post","url":"/post/2019-08-31-josephus/","weight":0,"wordcount":163},{"author":null,"categories":["Blog"],"content":"Implement an infinite wait queue with a linked list","date":1566864000,"description":"Implement an infinite wait queue with a linked list","dir":"post\\","excerpt_html":"Implement an infinite wait queue with a linked list","excerpt_text":"Implement an infinite wait queue with a linked list","expirydate":-62135596800,"fuzzywordcount":400,"html":"Implement an infinite wait queue with a linked list","keywords":null,"kind":"page","lang":"en","lastmod":1566864000,"objectID":"8952bab233395e581e73ea790f22fae5","permalink":"https://renjie-zhang.github.io/post/2019-08-27-queue-ii/","publishdate":"2019-08-27T00:00:00Z","readingtime":2,"relpermalink":"/post/2019-08-27-queue-ii/","section":"post","summary":"队列Ⅱ 使用数组实现队列的缺点是当存储的数据超过数组的长度之后就需要考虑扩容了，如果有无限排队的需求，那么就需要一个链表实现无限排队的队列，相比于数组实现队列，链表更加的简单。下面展示代码：\n基于链表实现的方式（java） /** * @author: renjie.zhang * @date:2019/8/25-16:23 * @Description: 使用链表实现队列 */ public class LinkedListQueue { private Node head =new Node(0); public Node getHead() { return head; } /** * 队列入队操作 * @param node */ public void EnQueue(Node node){ Node temp = head; while (true){ if (temp.next == null){ break; } temp = temp.next; } temp.next = node; } /** * 队列出队操作 * @param head * @return */ public Node DeQueue(Node head){ if(head.","tags":["Data Structure","Algorithm"],"title":"Queue","type":"post","url":"/post/2019-08-27-queue-ii/","weight":0,"wordcount":311},{"author":null,"categories":["Blog"],"content":"A Queue is a linear structure which follows a particular order in which the operations are performed. The order is First In First Out (FIFO).","date":1566259200,"description":"A Queue is a linear structure which follows a particular order in which the operations are performed. The order is First In First Out (FIFO).","dir":"post\\","excerpt_html":"A Queue is a linear structure which follows a particular order in which the operations are performed. The order is First In First Out (FIFO).","excerpt_text":"A Queue is a linear structure which follows a particular order in which the operations are performed. The order is First In First Out (FIFO).","expirydate":-62135596800,"fuzzywordcount":700,"html":"A Queue is a linear structure which follows a particular order in which the operations are performed. The order is First In First Out (FIFO).","keywords":null,"kind":"page","lang":"en","lastmod":1566259200,"objectID":"3ef2fac1d9ed8f00d03370cb5f50df11","permalink":"https://renjie-zhang.github.io/post/2019-08-22-queue/","publishdate":"2019-08-20T00:00:00Z","readingtime":4,"relpermalink":"/post/2019-08-22-queue/","section":"post","summary":"队列Ⅰ 像堆栈一样，队列是一种线性结构，它遵循着执行操作的特定顺序。比如在开发中常用的线程池就是一个队列，当我们向固定大小的线程池中请求一个线程时，如果线程池中有空闲的资源，那么可以获得到到，但是如果没有空闲的资源，那么线程池的处理一般有两种；一种是非阻塞的处理方式，直接拒绝任务请求；另外一种是阻塞的方式，将请求排队，等到有空闲的线程时，取出排队的请求继续处理。当处理排队请求时，我们又希望公平地处理每一个请求，先进先服务。队列有基于链表与基于数组的实现方式。\n 基于链表实现的队列可以实现一个无限排队的无界队列，但是可能导致过多请求排队，请求响应的时间过长，对于大部分资源有限又对响应时间敏感的系统，基于链表实现的无限排队的线程池是不适合的。 基于数据实现的队列可以实现一个有界队列，队列的大小有限，所以线程池中的排队请求超过队列的大小时，接下来的请求会被拒绝，这种对于响应时间敏感的系统来说更加的适合；但是队列的大小设置是一个十分重要的因素，队列大导致请求过多，队列小导致无法充分利用系统资源，发挥最大性能。  基于数组方式实现队列（java） public class ArrayQueue { //表示队列的最大容量 private int maxSize; //对列的头 private int front; //队列的尾 private int rear; //数组 private int[] arr; /** * 构造器 * @param arrMaxSize 队列的最大容量 */ public ArrayQueue(int arrMaxSize){ this.maxSize = arrMaxSize; this.arr = new int[maxSize]; //-1表示front的前一个位置 this.front = -1; //-1表示rear的最后一个数据 this.rear = -1; } /** *判断队列是否已装满 * @return */ public boolean isFull(){ return rear == maxSize-1; } /** * 判断队列是否为空 * @return */ public boolean isEmpty(){ return front == rear; } /** * 向队列中添加数据 * @param n 数据 */ public void addToQueue(int n){ if(isFull()){ System.","tags":["Data Structure","Algorithm"],"title":"Queue","type":"post","url":"/post/2019-08-22-queue/","weight":0,"wordcount":677},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"search\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"8946788897930c0c0c39fbfcd30ff2e4","permalink":"https://renjie-zhang.github.io/search/placeholder/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/search/placeholder/","section":"search","summary":"","tags":null,"title":"","type":"search","url":"/search/placeholder/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"top\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"7a0da914bde98a7d3fcc7f6c5886633c","permalink":"https://renjie-zhang.github.io/top/about/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/top/about/","section":"top","summary":"About Me 戒骄、戒躁\n成长中 2015年9月-2019年6月 成都师范学院 计算机科学学院\n2019年6月-至今 成都天衡智造有限公司 Java研发，主要工作为工业物联网数据采集,为工厂提供数据化、信息化解决方案。主要接入的设备有机床、磨床、西门子PLC、欧姆龙PLC、传感器等。主要使用协议有MQTT、OPC、Modbus等。负责数据采集摆渡服务（JAVA）的开发，以及边缘设备数据处理（.Net Core）开发.","tags":null,"title":"","type":"top","url":"/top/about/","weight":0,"wordcount":11},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":0,"html":null,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"","permalink":"https://renjie-zhang.github.io/search/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/search/","section":"search","summary":"","tags":null,"title":"Searches","type":"search","url":"/search/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":0,"html":null,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"","permalink":"https://renjie-zhang.github.io/top/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/top/","section":"top","summary":"","tags":null,"title":"Tops","type":"top","url":"/top/","weight":0,"wordcount":0}]