[{"author":null,"categories":null,"content":null,"date":1584144000,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":0,"html":null,"keywords":null,"kind":"taxonomy","lang":"en","lastmod":1584144000,"objectID":"","permalink":"https://renjie-zhang.github.io/categories/blog/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/categories/blog/","section":"categories","summary":"","tags":null,"title":"Blog","type":"categories","url":"/categories/blog/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1584144000,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":0,"html":null,"keywords":null,"kind":"taxonomyTerm","lang":"en","lastmod":1584144000,"objectID":"","permalink":"https://renjie-zhang.github.io/categories/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/categories/","section":"categories","summary":"","tags":null,"title":"Categories","type":"categories","url":"/categories/","weight":0,"wordcount":0},{"author":null,"categories":["Blog"],"content":"The fastest full-featured web framework for Go. Gin","date":1584144000,"description":"The fastest full-featured web framework for Go. Gin","dir":"post\\","excerpt_html":"The fastest full-featured web framework for Go. Gin","excerpt_text":"The fastest full-featured web framework for Go. Gin","expirydate":-62135596800,"fuzzywordcount":400,"html":"The fastest full-featured web framework for Go. Gin","keywords":null,"kind":"page","lang":"en","lastmod":1584144000,"objectID":"d18bd86869b9ea6ebc68406c91450850","permalink":"https://renjie-zhang.github.io/post/2020-3-14-gin-first/","publishdate":"2020-03-14T00:00:00Z","readingtime":2,"relpermalink":"/post/2020-3-14-gin-first/","section":"post","summary":"Gin初体验 后端开发难免会接触到web,在Java的框架中spring一家独大，无论是web还是其他服务spring都是不二的选择；而golang的web方面选择特别的多，想gin,beego等，现在还处于不断造轮子的阶段，都在为开源做贡献，目前进行了一个Gin的初体验，总体上是让人很满意的，不管是gin还是beego都是以modules的这种形式，只允许加入自己需要的东西，减少负荷，以便加载到内存中的modules都是自己需要的。\n特性都可以在gin的文档中寻找到，如果追求性能与高效，这是一个吸引人的亮点，在目前的开发中，都是最求极致的性能与高效。本来go已经在http中为我们做足了工作，建立起一个http请求及其简单。\npackage main import ( \u0026quot;fmt\u0026quot; \u0026quot;net/http\u0026quot; \u0026quot;time\u0026quot; ) func greet(w http.ResponseWriter, r *http.Request) { fmt.Fprintf(w, \u0026quot;Hello World! %s\u0026quot;, time.Now()) } func header(w http.ResponseWriter, req *http.Request) { for name, headers := range req.Header { for _, h := range headers { fmt.Fprintf(w, \u0026quot;%v: %v\\n\u0026quot;, name, h) } } } func main() { http.HandleFunc(\u0026quot;/\u0026quot;, greet) http.HandleFunc(\u0026quot;/headers\u0026quot;, header) http.ListenAndServe(\u0026quot;:8080\u0026quot;, nil) }  这样便建立起了一个http server,监听在8080端口。而gin建立起一个请求更为简单，一下为入门例子。\npackage main import \u0026quot;github.com/gin-gonic/gin\u0026quot; func main() { r := gin.","tags":["Web","Golang"],"title":"Gin","type":"post","url":"/post/2020-3-14-gin-first/","weight":0,"wordcount":313},{"author":null,"categories":null,"content":null,"date":1584144000,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":0,"html":null,"keywords":null,"kind":"taxonomy","lang":"en","lastmod":1584144000,"objectID":"","permalink":"https://renjie-zhang.github.io/tags/golang/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/tags/golang/","section":"tags","summary":"","tags":null,"title":"Golang","type":"tags","url":"/tags/golang/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1584144000,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":0,"html":null,"keywords":null,"kind":"section","lang":"en","lastmod":1584144000,"objectID":"","permalink":"https://renjie-zhang.github.io/post/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/post/","section":"post","summary":"","tags":null,"title":"Posts","type":"post","url":"/post/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1584144000,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":0,"html":null,"keywords":null,"kind":"home","lang":"en","lastmod":1584144000,"objectID":"","permalink":"https://renjie-zhang.github.io/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/","section":"","summary":"","tags":null,"title":"Renjie Blog","type":"page","url":"/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1584144000,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":0,"html":null,"keywords":null,"kind":"taxonomyTerm","lang":"en","lastmod":1584144000,"objectID":"","permalink":"https://renjie-zhang.github.io/tags/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/tags/","section":"tags","summary":"","tags":null,"title":"Tags","type":"tags","url":"/tags/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1584144000,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":0,"html":null,"keywords":null,"kind":"taxonomy","lang":"en","lastmod":1584144000,"objectID":"","permalink":"https://renjie-zhang.github.io/tags/web/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/tags/web/","section":"tags","summary":"","tags":null,"title":"Web","type":"tags","url":"/tags/web/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1567468800,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":0,"html":null,"keywords":null,"kind":"taxonomy","lang":"en","lastmod":1567468800,"objectID":"","permalink":"https://renjie-zhang.github.io/tags/algorithm/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/tags/algorithm/","section":"tags","summary":"","tags":null,"title":"Algorithm","type":"tags","url":"/tags/algorithm/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1567468800,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":0,"html":null,"keywords":null,"kind":"taxonomy","lang":"en","lastmod":1567468800,"objectID":"","permalink":"https://renjie-zhang.github.io/tags/data-structure/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/tags/data-structure/","section":"tags","summary":"","tags":null,"title":"Data Structure","type":"tags","url":"/tags/data-structure/","weight":0,"wordcount":0},{"author":null,"categories":["Blog"],"content":"https://zh.wikipedia.org/wiki/%E7%BA%A6%E7%91%9F%E5%A4%AB%E6%96%AF%E9%97%AE%E9%A2%98","date":1567468800,"description":"https://zh.wikipedia.org/wiki/%E7%BA%A6%E7%91%9F%E5%A4%AB%E6%96%AF%E9%97%AE%E9%A2%98","dir":"post\\","excerpt_html":"https://zh.wikipedia.org/wiki/%E7%BA%A6%E7%91%9F%E5%A4%AB%E6%96%AF%E9%97%AE%E9%A2%98","excerpt_text":"https://zh.wikipedia.org/wiki/%E7%BA%A6%E7%91%9F%E5%A4%AB%E6%96%AF%E9%97%AE%E9%A2%98","expirydate":-62135596800,"fuzzywordcount":200,"html":"https://zh.wikipedia.org/wiki/%E7%BA%A6%E7%91%9F%E5%A4%AB%E6%96%AF%E9%97%AE%E9%A2%98","keywords":null,"kind":"page","lang":"en","lastmod":1567468800,"objectID":"d9d86c6fda2952f24c44c53678295cdf","permalink":"https://renjie-zhang.github.io/post/2019-08-31-josephus/","publishdate":"2019-09-03T00:00:00Z","readingtime":1,"relpermalink":"/post/2019-08-31-josephus/","section":"post","summary":"约瑟夫问题 据说著名犹太历史学家 Josephus有过以下的故事：在罗马人占领乔塔帕特后，39 个犹太人与Josephus及他的朋友躲到一个洞中，39个犹太人决定宁愿死也不要被敌人抓到，于是决定了一个自杀方式：41个人排成一个圆圈，由第1个人开始报数，每报数到第3人该人就必须自杀，然后再由下一个重新报数，直到所有人都自杀身亡为止。然而Josephus 和他的朋友并不想遵从。首先从一个人开始，越过k-2个人（因为第一个人已经被越过），并杀掉第k个人。接着，再越过k-1个人，并杀掉第k个人。这个过程沿着圆圈一直进行，直到最终只剩下一个人留下，这个人就可以继续活着。问题是一开始要站在什么地方才能避免自杀？Josephus要他的朋友先假装遵从，他将朋友与自己安排在第16个与第31个位置，于是逃过了这场死亡游戏。\n问题即，给定人数、起点、方向和要跳过的数字，选择初始圆圈中的位置以避免被处决。\n基本选择的解法是使用单项的循环链表模拟整个过程，时间复杂度为O(N*M),而空间复杂度为O(N)。或者使用数学公式递归的方式求出存活下来的编号。\n循环链表解决 static void getPosition(int index,int total){ //first create a circle linked head Node head = new Node(1); Node prev = head; for(int i = 2;i\u0026lt;=total;i++){ prev.next = new Node(i); //move next prev = prev.next; } //create a cirecle linkedlist prev.next = head; // create two temp node Node ptr1 = head; Node ptr2 = head; while(ptr1.next != ptr1){ //find index-th node int count = 1; while (count !","tags":["Data Structure","Algorithm"],"title":"约瑟夫环(Josephus) ","type":"post","url":"/post/2019-08-31-josephus/","weight":0,"wordcount":163},{"author":null,"categories":["Blog"],"content":"Implement an infinite wait queue with a linked list","date":1566864000,"description":"Implement an infinite wait queue with a linked list","dir":"post\\","excerpt_html":"Implement an infinite wait queue with a linked list","excerpt_text":"Implement an infinite wait queue with a linked list","expirydate":-62135596800,"fuzzywordcount":400,"html":"Implement an infinite wait queue with a linked list","keywords":null,"kind":"page","lang":"en","lastmod":1566864000,"objectID":"8952bab233395e581e73ea790f22fae5","permalink":"https://renjie-zhang.github.io/post/2019-08-27-queue-ii/","publishdate":"2019-08-27T00:00:00Z","readingtime":2,"relpermalink":"/post/2019-08-27-queue-ii/","section":"post","summary":"队列Ⅱ 使用数组实现队列的缺点是当存储的数据超过数组的长度之后就需要考虑扩容了，如果有无限排队的需求，那么就需要一个链表实现无限排队的队列，相比于数组实现队列，链表更加的简单。下面展示代码：\n基于链表实现的方式（java） /** * @author: renjie.zhang * @date:2019/8/25-16:23 * @Description: 使用链表实现队列 */ public class LinkedListQueue { private Node head =new Node(0); public Node getHead() { return head; } /** * 队列入队操作 * @param node */ public void EnQueue(Node node){ Node temp = head; while (true){ if (temp.next == null){ break; } temp = temp.next; } temp.next = node; } /** * 队列出队操作 * @param head * @return */ public Node DeQueue(Node head){ if(head.","tags":["Data Structure","Algorithm"],"title":"Queue","type":"post","url":"/post/2019-08-27-queue-ii/","weight":0,"wordcount":311},{"author":null,"categories":["Blog"],"content":"A Queue is a linear structure which follows a particular order in which the operations are performed. The order is First In First Out (FIFO).","date":1566259200,"description":"A Queue is a linear structure which follows a particular order in which the operations are performed. The order is First In First Out (FIFO).","dir":"post\\","excerpt_html":"A Queue is a linear structure which follows a particular order in which the operations are performed. The order is First In First Out (FIFO).","excerpt_text":"A Queue is a linear structure which follows a particular order in which the operations are performed. The order is First In First Out (FIFO).","expirydate":-62135596800,"fuzzywordcount":700,"html":"A Queue is a linear structure which follows a particular order in which the operations are performed. The order is First In First Out (FIFO).","keywords":null,"kind":"page","lang":"en","lastmod":1566259200,"objectID":"3ef2fac1d9ed8f00d03370cb5f50df11","permalink":"https://renjie-zhang.github.io/post/2019-08-22-queue/","publishdate":"2019-08-20T00:00:00Z","readingtime":4,"relpermalink":"/post/2019-08-22-queue/","section":"post","summary":"队列Ⅰ 像堆栈一样，队列是一种线性结构，它遵循着执行操作的特定顺序。比如在开发中常用的线程池就是一个队列，当我们向固定大小的线程池中请求一个线程时，如果线程池中有空闲的资源，那么可以获得到到，但是如果没有空闲的资源，那么线程池的处理一般有两种；一种是非阻塞的处理方式，直接拒绝任务请求；另外一种是阻塞的方式，将请求排队，等到有空闲的线程时，取出排队的请求继续处理。当处理排队请求时，我们又希望公平地处理每一个请求，先进先服务。队列有基于链表与基于数组的实现方式。\n 基于链表实现的队列可以实现一个无限排队的无界队列，但是可能导致过多请求排队，请求响应的时间过长，对于大部分资源有限又对响应时间敏感的系统，基于链表实现的无限排队的线程池是不适合的。 基于数据实现的队列可以实现一个有界队列，队列的大小有限，所以线程池中的排队请求超过队列的大小时，接下来的请求会被拒绝，这种对于响应时间敏感的系统来说更加的适合；但是队列的大小设置是一个十分重要的因素，队列大导致请求过多，队列小导致无法充分利用系统资源，发挥最大性能。  基于数组方式实现队列（java） public class ArrayQueue { //表示队列的最大容量 private int maxSize; //对列的头 private int front; //队列的尾 private int rear; //数组 private int[] arr; /** * 构造器 * @param arrMaxSize 队列的最大容量 */ public ArrayQueue(int arrMaxSize){ this.maxSize = arrMaxSize; this.arr = new int[maxSize]; //-1表示front的前一个位置 this.front = -1; //-1表示rear的最后一个数据 this.rear = -1; } /** *判断队列是否已装满 * @return */ public boolean isFull(){ return rear == maxSize-1; } /** * 判断队列是否为空 * @return */ public boolean isEmpty(){ return front == rear; } /** * 向队列中添加数据 * @param n 数据 */ public void addToQueue(int n){ if(isFull()){ System.","tags":["Data Structure","Algorithm"],"title":"Queue","type":"post","url":"/post/2019-08-22-queue/","weight":0,"wordcount":677},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"search\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"8946788897930c0c0c39fbfcd30ff2e4","permalink":"https://renjie-zhang.github.io/search/placeholder/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/search/placeholder/","section":"search","summary":"","tags":null,"title":"","type":"search","url":"/search/placeholder/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"top\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"7a0da914bde98a7d3fcc7f6c5886633c","permalink":"https://renjie-zhang.github.io/top/about/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/top/about/","section":"top","summary":"About Me 戒骄、戒躁\n成长中 2015年9月-2019年6月 成都师范学院 计算机科学学院\n2018年11月-至今 成都天衡智造有限公司 Java研发；目前主要内容维护以开发模块，PYQT开发","tags":null,"title":"","type":"top","url":"/top/about/","weight":0,"wordcount":10},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":0,"html":null,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"","permalink":"https://renjie-zhang.github.io/search/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/search/","section":"search","summary":"","tags":null,"title":"Searches","type":"search","url":"/search/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":0,"html":null,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"","permalink":"https://renjie-zhang.github.io/top/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/top/","section":"top","summary":"","tags":null,"title":"Tops","type":"top","url":"/top/","weight":0,"wordcount":0}]